name: Build & Deploy EWShop

on:
  push:
    branches:
      - main   # or your release branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Docker Buildx
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # 3. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build and push Docker image
      - name: Build & Push Docker image
        run: |
          IMAGE_NAME=calmbreakfast/ewshop-app
          TAG=latest
          echo "Building Docker image $IMAGE_NAME:$TAG..."
          docker build -t $IMAGE_NAME:$TAG .
          echo "Pushing Docker image to Docker Hub..."
          docker push $IMAGE_NAME:$TAG

      # 5. Set up SSH agent for Lightsail
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.LIGHTSAIL_SSH_KEY }}

      # 6. Deploy to Lightsail
      - name: Deploy to Lightsail via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@3.76.217.5 << 'EOF'
            IMAGE_NAME=calmbreakfast/ewshop-app
            TAG=latest
            CONTAINER_NAME=ewshop-app
            NEW_CONTAINER=${CONTAINER_NAME}-new

            echo "Pulling latest image from Docker Hub..."
            if ! docker pull $IMAGE_NAME:$TAG; then
              echo "❌ Failed to pull image $IMAGE_NAME:$TAG"
              exit 1
            fi

            echo "Starting new container $NEW_CONTAINER..."
            if docker run -d --name $NEW_CONTAINER -p 8080:8080 $IMAGE_NAME:$TAG; then
              echo "✅ New container started successfully."
              echo "Stopping old container $CONTAINER_NAME..."
              docker stop $CONTAINER_NAME || true
              docker rm $CONTAINER_NAME || true
              docker rename $NEW_CONTAINER $CONTAINER_NAME
              echo "✅ Deployment complete!"
            else
              echo "❌ Failed to start new container."
              echo "=== Logs from failed container ==="
              docker logs $NEW_CONTAINER || echo "No logs available"
              echo "Keeping old container running."
              docker rm $NEW_CONTAINER || true
              exit 1
            fi
          EOF
