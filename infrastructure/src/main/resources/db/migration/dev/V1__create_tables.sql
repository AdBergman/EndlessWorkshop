-- 1️⃣ Create ENUM types for PostgreSQL
CREATE TYPE improvement_unique_type AS ENUM ('ERADIONE', 'CITY', 'GLASSTEEL', 'EMPIRE', 'HYPERIUM', 'LAZUALIN', 'THALITINE', 'TITANIUM');

CREATE TYPE strategic_type AS ENUM ('ERADIONE', 'CITY', 'GLASSTEEL', 'EMPIRE', 'HYPERIUM', 'LAZUALIN', 'THALITINE', 'TITANIUM');

CREATE TYPE resource_type AS ENUM ('CORPSES', 'ERADIONE', 'DUST', 'GLASSTEEL', 'FOOD', 'HYPERIUM', 'INDUSTRY', 'LAZUALIN', 'INFLUENCE', 'THALITINE', 'SCIENCE', 'TITANIUM');

CREATE TYPE tech_type AS ENUM ('DEFENSE', 'DISCOVERY', 'ECONOMY', 'SOCIETY');

CREATE TYPE faction_type AS ENUM ('ASPECT', 'KIN', 'LORDS', 'NECROPHAGE', 'TAHUK');

CREATE TYPE unit_specialization_type AS ENUM (
    'CAVALRY', 'SWARM', 'CAVALRY_RANGED', 'FLYING', 'FLYING_RANGED', 'FLYING_SWARM',
    'INFANTRY', 'JUGGERNAUT', 'JUGGERNAUT_RANGED', 'RANGED'
    );


-- 2️⃣ Tables
CREATE TABLE CONVERTOR
(
    ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DESCRIPTION VARCHAR(255),
    NAME        VARCHAR(255) NOT NULL
);

CREATE TABLE DISTRICTS
(
    ID               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EFFECT           VARCHAR(255),
    NAME             VARCHAR(255) NOT NULL UNIQUE,
    PLACEMENT_PREREQ VARCHAR(255)
);

CREATE TABLE DISTRICT_ADJACENCY_BONUSES
(
    DISTRICT_ID      BIGINT NOT NULL,
    ADJACENCY_BONUS  VARCHAR(255),
    CONSTRAINT fk_district_adj FOREIGN KEY (DISTRICT_ID) REFERENCES DISTRICTS
);

CREATE TABLE DISTRICT_INFO
(
    DISTRICT_ID BIGINT NOT NULL,
    INFO        VARCHAR(255),
    CONSTRAINT fk_district_info FOREIGN KEY (DISTRICT_ID) REFERENCES DISTRICTS
);

CREATE TABLE DISTRICT_TILE_BONUSES
(
    DISTRICT_ID BIGINT NOT NULL,
    TILE_BONUS  VARCHAR(255),
    CONSTRAINT fk_district_tile FOREIGN KEY (DISTRICT_ID) REFERENCES DISTRICTS
);

CREATE TABLE IMPROVEMENTS
(
    ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ERA         INTEGER NOT NULL,
    NAME        VARCHAR(255) NOT NULL UNIQUE,
    UNIQUE_TYPE improvement_unique_type
);

CREATE TABLE IMPROVEMENT_COSTS
(
    IMPROVEMENT_ID BIGINT NOT NULL,
    AMOUNT         INTEGER NOT NULL,
    RESOURCE_TYPE  resource_type NOT NULL,
    CONSTRAINT fk_improvement_cost FOREIGN KEY (IMPROVEMENT_ID) REFERENCES IMPROVEMENTS
);

CREATE TABLE IMPROVEMENT_EFFECTS
(
    IMPROVEMENT_ID BIGINT NOT NULL,
    EFFECT         VARCHAR(255),
    CONSTRAINT fk_improvement_effect FOREIGN KEY (IMPROVEMENT_ID) REFERENCES IMPROVEMENTS
);

CREATE TABLE SHARED_TECH_BUILDS
(
    ID         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CREATED_AT TIMESTAMP NOT NULL,
    NAME       VARCHAR(255),
    UUID       UUID NOT NULL UNIQUE
);

CREATE TABLE SHARED_TECH_BUILD_TECHS
(
    BUILD_ID BIGINT NOT NULL,
    TECH_ID  VARCHAR(255),
    CONSTRAINT fk_shared_tech_build FOREIGN KEY (BUILD_ID) REFERENCES SHARED_TECH_BUILDS
);

CREATE TABLE TECH
(
    ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    X_PCT       DOUBLE PRECISION NOT NULL,
    Y_PCT       DOUBLE PRECISION NOT NULL,
    ERA         INTEGER NOT NULL,
    NAME        VARCHAR(255) NOT NULL,
    TYPE        tech_type NOT NULL,
    EXCLUDES_ID BIGINT,
    PREREQ_ID   BIGINT,
    CONSTRAINT fk_tech_prereq FOREIGN KEY (PREREQ_ID) REFERENCES TECH,
    CONSTRAINT fk_tech_excludes FOREIGN KEY (EXCLUDES_ID) REFERENCES TECH
);

CREATE TABLE TECH_ENTITY_EFFECTS
(
    TECH_ENTITY_ID BIGINT NOT NULL,
    EFFECTS        VARCHAR(255),
    CONSTRAINT fk_tech_entity_effect FOREIGN KEY (TECH_ENTITY_ID) REFERENCES TECH
);

CREATE TABLE TECH_ENTITY_FACTIONS
(
    TECH_ENTITY_ID BIGINT NOT NULL,
    FACTION        faction_type,
    CONSTRAINT fk_tech_entity_faction FOREIGN KEY (TECH_ENTITY_ID) REFERENCES TECH
);

CREATE TABLE TREATY
(
    ID          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DESCRIPTION VARCHAR(255),
    NAME        VARCHAR(255) NOT NULL
);

CREATE TABLE UNIT_SKILLS
(
    ID     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AMOUNT INTEGER,
    NAME   VARCHAR(255) NOT NULL UNIQUE,
    TARGET VARCHAR(255),
    TYPE   VARCHAR(255)
);

CREATE TABLE UNIT_SPECIALIZATION
(
    ID              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DEFENSE         INTEGER NOT NULL,
    DESCRIPTION     VARCHAR(255),
    FACTION         VARCHAR(255),
    HEALTH          INTEGER NOT NULL,
    MAX_DAMAGE      INTEGER NOT NULL,
    MIN_DAMAGE      INTEGER NOT NULL,
    MOVEMENT_POINTS INTEGER NOT NULL,
    NAME            VARCHAR(255) NOT NULL,
    TYPE            unit_specialization_type,
    UPKEEP_PER_TURN INTEGER
);

CREATE TABLE TECH_UNLOCK
(
    ID                     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    UNLOCK_TEXT            VARCHAR(255),
    CONVERTOR_ID           BIGINT,
    DISTRICT_ID            BIGINT,
    IMPROVEMENT_ID         BIGINT,
    TECH_ID                BIGINT NOT NULL,
    TREATY_ID              BIGINT,
    UNIT_SPECIALIZATION_ID BIGINT,
    CONSTRAINT fk_tech_unlock_treaty FOREIGN KEY (TREATY_ID) REFERENCES TREATY,
    CONSTRAINT fk_tech_unlock_district FOREIGN KEY (DISTRICT_ID) REFERENCES DISTRICTS,
    CONSTRAINT fk_tech_unlock_tech FOREIGN KEY (TECH_ID) REFERENCES TECH,
    CONSTRAINT fk_tech_unlock_unit FOREIGN KEY (UNIT_SPECIALIZATION_ID) REFERENCES UNIT_SPECIALIZATION,
    CONSTRAINT fk_tech_unlock_improvement FOREIGN KEY (IMPROVEMENT_ID) REFERENCES IMPROVEMENTS,
    CONSTRAINT fk_tech_unlock_convertor FOREIGN KEY (CONVERTOR_ID) REFERENCES CONVERTOR
);

CREATE TABLE TECH_UNLOCKS
(
    TECH_ENTITY_ID BIGINT NOT NULL,
    UNLOCKS_ID     BIGINT NOT NULL UNIQUE,
    CONSTRAINT fk_tech_unlocks_tech FOREIGN KEY (TECH_ENTITY_ID) REFERENCES TECH,
    CONSTRAINT fk_tech_unlocks_unlock FOREIGN KEY (UNLOCKS_ID) REFERENCES TECH_UNLOCK
);

CREATE TABLE UNIT_SPECIALIZATION_COSTS
(
    UNIT_ID   BIGINT NOT NULL,
    AMOUNT    INTEGER NOT NULL,
    RESOURCE  resource_type,
    STRATEGIC strategic_type,
    CONSTRAINT fk_unit_specialization_cost FOREIGN KEY (UNIT_ID) REFERENCES UNIT_SPECIALIZATION
);

CREATE TABLE UNIT_SPECIALIZATION_SKILLS
(
    ID       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    LEVEL    INTEGER,
    SKILL_ID BIGINT NOT NULL,
    UNIT_ID  BIGINT NOT NULL,
    CONSTRAINT fk_unit_spec_skill_skill FOREIGN KEY (SKILL_ID) REFERENCES UNIT_SKILLS,
    CONSTRAINT fk_unit_spec_skill_unit FOREIGN KEY (UNIT_ID) REFERENCES UNIT_SPECIALIZATION
);